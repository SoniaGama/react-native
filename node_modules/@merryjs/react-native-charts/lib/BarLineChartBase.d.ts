import * as PropTypes from 'prop-types';
import { ViewProperties } from 'react-native';
declare const iface: {
    propTypes: {
        drawGridBackground: PropTypes.Requireable<any>;
        gridBackgroundColor: PropTypes.Requireable<any>;
        drawBorders: PropTypes.Requireable<any>;
        borderColor: PropTypes.Requireable<any>;
        borderWidth: PropTypes.Requireable<any>;
        maxVisibleValueCount: PropTypes.Requireable<any>;
        autoScaleMinMaxEnabled: PropTypes.Requireable<any>;
        keepPositionOnRotation: PropTypes.Requireable<any>;
        scaleEnabled: PropTypes.Requireable<any>;
        scaleXEnabled: PropTypes.Requireable<any>;
        scaleYEnabled: PropTypes.Requireable<any>;
        dragEnabled: PropTypes.Requireable<any>;
        pinchZoom: PropTypes.Requireable<any>;
        doubleTapToZoomEnabled: PropTypes.Requireable<any>;
        yAxis: PropTypes.Requireable<any>;
        zoom: PropTypes.Requireable<any>;
        animation: PropTypes.Requireable<any>;
        chartBackgroundColor: PropTypes.Requireable<any>;
        logEnabled: PropTypes.Requireable<any>;
        noDataText: PropTypes.Requireable<any>;
        touchEnabled: PropTypes.Requireable<any>;
        dragDecelerationEnabled: PropTypes.Requireable<any>;
        dragDecelerationFrictionCoef: (props: any, propName: string, componentName: string) => Error | undefined;
        chartDescription: PropTypes.Requireable<any>;
        legend: PropTypes.Requireable<any>;
        xAxis: PropTypes.Requireable<any>;
        marker: PropTypes.Requireable<any>;
    } | {
        drawGridBackground: PropTypes.Requireable<any>;
        gridBackgroundColor: PropTypes.Requireable<any>;
        drawBorders: PropTypes.Requireable<any>;
        borderColor: PropTypes.Requireable<any>;
        borderWidth: PropTypes.Requireable<any>;
        maxVisibleValueCount: PropTypes.Requireable<any>;
        autoScaleMinMaxEnabled: PropTypes.Requireable<any>;
        keepPositionOnRotation: PropTypes.Requireable<any>;
        scaleEnabled: PropTypes.Requireable<any>;
        scaleXEnabled: PropTypes.Requireable<any>;
        scaleYEnabled: PropTypes.Requireable<any>;
        dragEnabled: PropTypes.Requireable<any>;
        pinchZoom: PropTypes.Requireable<any>;
        doubleTapToZoomEnabled: PropTypes.Requireable<any>;
        yAxis: PropTypes.Requireable<any>;
        zoom: PropTypes.Requireable<any>;
        animation: PropTypes.Requireable<any>;
        chartBackgroundColor: PropTypes.Requireable<any>;
        logEnabled: PropTypes.Requireable<any>;
        noDataText: PropTypes.Requireable<any>;
        touchEnabled: PropTypes.Requireable<any>;
        dragDecelerationEnabled: PropTypes.Requireable<any>;
        dragDecelerationFrictionCoef: (props: any, propName: string, componentName: string) => Error | undefined;
        chartDescription: PropTypes.Requireable<any>;
        legend: PropTypes.Requireable<any>;
        xAxis: PropTypes.Requireable<any>;
        marker: PropTypes.Requireable<any>;
        accessibilityLabel?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        accessible?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        hitSlop?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onAcccessibilityTap?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onLayout?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onMagicTap?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        pointerEvents?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        removeClippedSubviews?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        style?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        testID?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        accessibilityComponentType?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        accessibilityLiveRegion?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        collapsable?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        importantForAccessibility?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        needsOffscreenAlphaCompositing?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        renderToHardwareTextureAndroid?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        accessibilityTraits?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        shouldRasterizeIOS?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onStartShouldSetResponder?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onMoveShouldSetResponder?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderEnd?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderGrant?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderReject?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderMove?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderRelease?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderStart?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderTerminationRequest?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onResponderTerminate?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onStartShouldSetResponderCapture?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onMoveShouldSetResponderCapture?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onTouchStart?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onTouchMove?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onTouchEnd?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onTouchCancel?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
        onTouchEndCapture?: ((object: ViewProperties, key: string, componentName: string, ...rest: any[]) => Error | null) | undefined;
    };
};
export default iface;
